
Interfacing_Modules_AMIT_F20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000082c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00800060  00800060  0000082c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000085c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030a1  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e62  00000000  00000000  00003bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ba4  00000000  00000000  00004a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000724  00000000  00000000  00006600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000109f  00000000  00000000  00006d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000277b  00000000  00000000  00007dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000a53e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 39       	cpi	r26, 0x94	; 148
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 01 02 	call	0x402	; 0x402 <main>
  8a:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPin_Direction>:

#include "DIO.h"

void DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_Direction direction)
{
	switch (direction)
  92:	44 23       	and	r20, r20
  94:	19 f0       	breq	.+6      	; 0x9c <DIO_SetPin_Direction+0xa>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	c9 f1       	breq	.+114    	; 0x10c <DIO_SetPin_Direction+0x7a>
  9a:	08 95       	ret
	{
		case DIO_INPUT:
		switch (port)
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	91 f0       	breq	.+36     	; 0xc4 <DIO_SetPin_Direction+0x32>
  a0:	28 f0       	brcs	.+10     	; 0xac <DIO_SetPin_Direction+0x1a>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	d9 f0       	breq	.+54     	; 0xdc <DIO_SetPin_Direction+0x4a>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	29 f1       	breq	.+74     	; 0xf4 <DIO_SetPin_Direction+0x62>
  aa:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPin_Direction+0x26>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPin_Direction+0x22>
  bc:	80 95       	com	r24
  be:	82 23       	and	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
			break;
  c2:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
  c4:	27 b3       	in	r18, 0x17	; 23
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_SetPin_Direction+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_SetPin_Direction+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
			break;
  da:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
  dc:	24 b3       	in	r18, 0x14	; 20
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPin_Direction+0x56>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPin_Direction+0x52>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	84 bb       	out	0x14, r24	; 20
			break;
  f2:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
  f4:	21 b3       	in	r18, 0x11	; 17
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_SetPin_Direction+0x6e>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_SetPin_Direction+0x6a>
 104:	80 95       	com	r24
 106:	82 23       	and	r24, r18
 108:	81 bb       	out	0x11, r24	; 17
			break;
 10a:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (port)
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	89 f0       	breq	.+34     	; 0x132 <DIO_SetPin_Direction+0xa0>
 110:	28 f0       	brcs	.+10     	; 0x11c <DIO_SetPin_Direction+0x8a>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	c9 f0       	breq	.+50     	; 0x148 <DIO_SetPin_Direction+0xb6>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	11 f1       	breq	.+68     	; 0x15e <DIO_SetPin_Direction+0xcc>
 11a:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 11c:	2a b3       	in	r18, 0x1a	; 26
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPin_Direction+0x96>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPin_Direction+0x92>
 12c:	82 2b       	or	r24, r18
 12e:	8a bb       	out	0x1a, r24	; 26
			break;
 130:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 132:	27 b3       	in	r18, 0x17	; 23
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_SetPin_Direction+0xac>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_SetPin_Direction+0xa8>
 142:	82 2b       	or	r24, r18
 144:	87 bb       	out	0x17, r24	; 23
			break;
 146:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 148:	24 b3       	in	r18, 0x14	; 20
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPin_Direction+0xc2>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPin_Direction+0xbe>
 158:	82 2b       	or	r24, r18
 15a:	84 bb       	out	0x14, r24	; 20
			break;
 15c:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 15e:	21 b3       	in	r18, 0x11	; 17
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_SetPin_Direction+0xd8>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_SetPin_Direction+0xd4>
 16e:	82 2b       	or	r24, r18
 170:	81 bb       	out	0x11, r24	; 17
 172:	08 95       	ret

00000174 <DIO_SetPin_State>:
		break;
	}
}
void DIO_SetPin_State(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	switch (state)
 174:	44 23       	and	r20, r20
 176:	19 f0       	breq	.+6      	; 0x17e <DIO_SetPin_State+0xa>
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	c9 f1       	breq	.+114    	; 0x1ee <DIO_SetPin_State+0x7a>
 17c:	08 95       	ret
	{
		case DIO_LOW:
		switch (port)
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	91 f0       	breq	.+36     	; 0x1a6 <DIO_SetPin_State+0x32>
 182:	28 f0       	brcs	.+10     	; 0x18e <DIO_SetPin_State+0x1a>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	d9 f0       	breq	.+54     	; 0x1be <DIO_SetPin_State+0x4a>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	29 f1       	breq	.+74     	; 0x1d6 <DIO_SetPin_State+0x62>
 18c:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_SetPin_State+0x26>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_SetPin_State+0x22>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	8b bb       	out	0x1b, r24	; 27
			break;
 1a4:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 1a6:	28 b3       	in	r18, 0x18	; 24
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_SetPin_State+0x3e>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_SetPin_State+0x3a>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	88 bb       	out	0x18, r24	; 24
			break;
 1bc:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 1be:	25 b3       	in	r18, 0x15	; 21
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_SetPin_State+0x56>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_SetPin_State+0x52>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	85 bb       	out	0x15, r24	; 21
			break;
 1d4:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 1d6:	22 b3       	in	r18, 0x12	; 18
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_SetPin_State+0x6e>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_SetPin_State+0x6a>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	82 bb       	out	0x12, r24	; 18
			break;
 1ec:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (port)
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	89 f0       	breq	.+34     	; 0x214 <DIO_SetPin_State+0xa0>
 1f2:	28 f0       	brcs	.+10     	; 0x1fe <DIO_SetPin_State+0x8a>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	c9 f0       	breq	.+50     	; 0x22a <DIO_SetPin_State+0xb6>
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	11 f1       	breq	.+68     	; 0x240 <DIO_SetPin_State+0xcc>
 1fc:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 1fe:	2b b3       	in	r18, 0x1b	; 27
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_SetPin_State+0x96>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_SetPin_State+0x92>
 20e:	82 2b       	or	r24, r18
 210:	8b bb       	out	0x1b, r24	; 27
			break;
 212:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 214:	28 b3       	in	r18, 0x18	; 24
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_SetPin_State+0xac>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_SetPin_State+0xa8>
 224:	82 2b       	or	r24, r18
 226:	88 bb       	out	0x18, r24	; 24
			break;
 228:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 22a:	25 b3       	in	r18, 0x15	; 21
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_SetPin_State+0xc2>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_SetPin_State+0xbe>
 23a:	82 2b       	or	r24, r18
 23c:	85 bb       	out	0x15, r24	; 21
			break;
 23e:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 240:	22 b3       	in	r18, 0x12	; 18
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_SetPin_State+0xd8>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_SetPin_State+0xd4>
 250:	82 2b       	or	r24, r18
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret

00000256 <LCD_WRITE_CMD>:
	}
}
void LCD_WRITE_CHR(uint32_t numbr)
{
	//uint8_t num[10];
	LCD_WRITE_DTA(numbr);
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	63 e0       	ldi	r22, 0x03	; 3
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 278:	8b b3       	in	r24, 0x1b	; 27
 27a:	9c 2f       	mov	r25, r28
 27c:	90 7f       	andi	r25, 0xF0	; 240
 27e:	8f 70       	andi	r24, 0x0F	; 15
 280:	89 2b       	or	r24, r25
 282:	8b bb       	out	0x1b, r24	; 27
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 28e:	8f e9       	ldi	r24, 0x9F	; 159
 290:	9f e0       	ldi	r25, 0x0F	; 15
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_WRITE_CMD+0x3c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_WRITE_CMD+0x42>
 298:	00 00       	nop
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	63 e0       	ldi	r22, 0x03	; 3
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 2a4:	2b b3       	in	r18, 0x1b	; 27
 2a6:	30 e1       	ldi	r19, 0x10	; 16
 2a8:	c3 9f       	mul	r28, r19
 2aa:	c0 01       	movw	r24, r0
 2ac:	11 24       	eor	r1, r1
 2ae:	92 2f       	mov	r25, r18
 2b0:	9f 70       	andi	r25, 0x0F	; 15
 2b2:	89 2b       	or	r24, r25
 2b4:	8b bb       	out	0x1b, r24	; 27
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	63 e0       	ldi	r22, 0x03	; 3
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 2c0:	8f e9       	ldi	r24, 0x9F	; 159
 2c2:	9f e0       	ldi	r25, 0x0F	; 15
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_WRITE_CMD+0x6e>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_WRITE_CMD+0x74>
 2ca:	00 00       	nop
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	63 e0       	ldi	r22, 0x03	; 3
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 2d6:	8f e3       	ldi	r24, 0x3F	; 63
 2d8:	9f e1       	ldi	r25, 0x1F	; 31
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_WRITE_CMD+0x84>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_WRITE_CMD+0x8a>
 2e0:	00 00       	nop
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <LCD_Init>:
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	64 e0       	ldi	r22, 0x04	; 4
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	65 e0       	ldi	r22, 0x05	; 5
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	66 e0       	ldi	r22, 0x06	; 6
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	67 e0       	ldi	r22, 0x07	; 7
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 32c:	2f ef       	ldi	r18, 0xFF	; 255
 32e:	83 ed       	ldi	r24, 0xD3	; 211
 330:	90 e3       	ldi	r25, 0x30	; 48
 332:	21 50       	subi	r18, 0x01	; 1
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <LCD_Init+0x4c>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <LCD_Init+0x56>
 33c:	00 00       	nop
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WRITE_CMD>
 344:	83 e3       	ldi	r24, 0x33	; 51
 346:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WRITE_CMD>
 34a:	82 e3       	ldi	r24, 0x32	; 50
 34c:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WRITE_CMD>
 350:	88 e2       	ldi	r24, 0x28	; 40
 352:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WRITE_CMD>
 356:	8c e0       	ldi	r24, 0x0C	; 12
 358:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WRITE_CMD>
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WRITE_CMD>
 362:	86 e0       	ldi	r24, 0x06	; 6
 364:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WRITE_CMD>
 368:	08 95       	ret

0000036a <LCD_CLEAR>:
	//ltoa(numbr, (uint8_t*)num, 10);//Long to Ascii
	//LCD_WRITE_STR(num);
}
void LCD_CLEAR(void)/*Clear data display on screen*/
{
	LCD_WRITE_CMD(0x01);
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WRITE_CMD>
 370:	08 95       	ret

00000372 <vListInsertEnd>:
    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	9c 01       	movw	r18, r24
 378:	fb 01       	movw	r30, r22
 37a:	dc 01       	movw	r26, r24
 37c:	11 96       	adiw	r26, 0x01	; 1
 37e:	cd 91       	ld	r28, X+
 380:	dc 91       	ld	r29, X
 382:	12 97       	sbiw	r26, 0x02	; 2
 384:	d3 83       	std	Z+3, r29	; 0x03
 386:	c2 83       	std	Z+2, r28	; 0x02
 388:	8c 81       	ldd	r24, Y+4	; 0x04
 38a:	9d 81       	ldd	r25, Y+5	; 0x05
 38c:	95 83       	std	Z+5, r25	; 0x05
 38e:	84 83       	std	Z+4, r24	; 0x04
 390:	8c 81       	ldd	r24, Y+4	; 0x04
 392:	9d 81       	ldd	r25, Y+5	; 0x05
 394:	dc 01       	movw	r26, r24
 396:	13 96       	adiw	r26, 0x03	; 3
 398:	7c 93       	st	X, r23
 39a:	6e 93       	st	-X, r22
 39c:	12 97       	sbiw	r26, 0x02	; 2
 39e:	7d 83       	std	Y+5, r23	; 0x05
 3a0:	6c 83       	std	Y+4, r22	; 0x04
 3a2:	31 87       	std	Z+9, r19	; 0x09
 3a4:	20 87       	std	Z+8, r18	; 0x08
 3a6:	f9 01       	movw	r30, r18
 3a8:	80 81       	ld	r24, Z
 3aa:	8f 5f       	subi	r24, 0xFF	; 255
 3ac:	80 83       	st	Z, r24
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	08 95       	ret

000003b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 3ba:	a0 85       	ldd	r26, Z+8	; 0x08
 3bc:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 3be:	c2 81       	ldd	r28, Z+2	; 0x02
 3c0:	d3 81       	ldd	r29, Z+3	; 0x03
 3c2:	84 81       	ldd	r24, Z+4	; 0x04
 3c4:	95 81       	ldd	r25, Z+5	; 0x05
 3c6:	9d 83       	std	Y+5, r25	; 0x05
 3c8:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 3ca:	c4 81       	ldd	r28, Z+4	; 0x04
 3cc:	d5 81       	ldd	r29, Z+5	; 0x05
 3ce:	82 81       	ldd	r24, Z+2	; 0x02
 3d0:	93 81       	ldd	r25, Z+3	; 0x03
 3d2:	9b 83       	std	Y+3, r25	; 0x03
 3d4:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 3d6:	11 96       	adiw	r26, 0x01	; 1
 3d8:	8d 91       	ld	r24, X+
 3da:	9c 91       	ld	r25, X
 3dc:	12 97       	sbiw	r26, 0x02	; 2
 3de:	e8 17       	cp	r30, r24
 3e0:	f9 07       	cpc	r31, r25
 3e2:	31 f4       	brne	.+12     	; 0x3f0 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 3e4:	84 81       	ldd	r24, Z+4	; 0x04
 3e6:	95 81       	ldd	r25, Z+5	; 0x05
 3e8:	12 96       	adiw	r26, 0x02	; 2
 3ea:	9c 93       	st	X, r25
 3ec:	8e 93       	st	-X, r24
 3ee:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 3f0:	11 86       	std	Z+9, r1	; 0x09
 3f2:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
 3f4:	8c 91       	ld	r24, X
 3f6:	81 50       	subi	r24, 0x01	; 1
 3f8:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
 3fa:	8c 91       	ld	r24, X
}
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <main>:



int main(void)
{
	LCD_Init();
 402:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD_Init>
	LCD_CLEAR();
 406:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_CLEAR>
	UART_Init();
 40a:	0e 94 ce 03 	call	0x79c	; 0x79c <UART_Init>
	uint8_t* data;
	Master_Init();
 40e:	0e 94 81 02 	call	0x502	; 0x502 <Master_Init>


	while(1)
	{
		data = UART_Receive();
 412:	0e 94 d6 03 	call	0x7ac	; 0x7ac <UART_Receive>
 416:	90 e0       	ldi	r25, 0x00	; 0
		if (data == '1')
 418:	81 33       	cpi	r24, 0x31	; 49
 41a:	91 05       	cpc	r25, r1
 41c:	31 f4       	brne	.+12     	; 0x42a <main+0x28>
		{
			Master_Trans(1);
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	0e 94 88 02 	call	0x510	; 0x510 <Master_Trans>
			LCD_CLEAR();
 424:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_CLEAR>
 428:	f4 cf       	rjmp	.-24     	; 0x412 <main+0x10>
		}
		else if (data == '2')
 42a:	82 33       	cpi	r24, 0x32	; 50
 42c:	91 05       	cpc	r25, r1
 42e:	21 f4       	brne	.+8      	; 0x438 <main+0x36>
		{
			Master_Trans(2);
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	0e 94 88 02 	call	0x510	; 0x510 <Master_Trans>
 436:	ed cf       	rjmp	.-38     	; 0x412 <main+0x10>
		}
		else if (data == '0')
 438:	c0 97       	sbiw	r24, 0x30	; 48
 43a:	59 f7       	brne	.-42     	; 0x412 <main+0x10>
		{
			Master_Trans(0);
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	0e 94 88 02 	call	0x510	; 0x510 <Master_Trans>
 442:	e7 cf       	rjmp	.-50     	; 0x412 <main+0x10>

00000444 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	f8 94       	cli
 44a:	0f 92       	push	r0
 44c:	1f 92       	push	r1
 44e:	11 24       	eor	r1, r1
 450:	2f 92       	push	r2
 452:	3f 92       	push	r3
 454:	4f 92       	push	r4
 456:	5f 92       	push	r5
 458:	6f 92       	push	r6
 45a:	7f 92       	push	r7
 45c:	8f 92       	push	r8
 45e:	9f 92       	push	r9
 460:	af 92       	push	r10
 462:	bf 92       	push	r11
 464:	cf 92       	push	r12
 466:	df 92       	push	r13
 468:	ef 92       	push	r14
 46a:	ff 92       	push	r15
 46c:	0f 93       	push	r16
 46e:	1f 93       	push	r17
 470:	2f 93       	push	r18
 472:	3f 93       	push	r19
 474:	4f 93       	push	r20
 476:	5f 93       	push	r21
 478:	6f 93       	push	r22
 47a:	7f 93       	push	r23
 47c:	8f 93       	push	r24
 47e:	9f 93       	push	r25
 480:	af 93       	push	r26
 482:	bf 93       	push	r27
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
 48c:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <pxCurrentTCB>
 490:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <pxCurrentTCB+0x1>
 494:	0d b6       	in	r0, 0x3d	; 61
 496:	0d 92       	st	X+, r0
 498:	0e b6       	in	r0, 0x3e	; 62
 49a:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 49c:	0e 94 a9 02 	call	0x552	; 0x552 <xTaskIncrementTick>
 4a0:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 4a2:	0e 94 68 03 	call	0x6d0	; 0x6d0 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 4a6:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <pxCurrentTCB>
 4aa:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <pxCurrentTCB+0x1>
 4ae:	cd 91       	ld	r28, X+
 4b0:	cd bf       	out	0x3d, r28	; 61
 4b2:	dd 91       	ld	r29, X+
 4b4:	de bf       	out	0x3e, r29	; 62
 4b6:	ff 91       	pop	r31
 4b8:	ef 91       	pop	r30
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	bf 91       	pop	r27
 4c0:	af 91       	pop	r26
 4c2:	9f 91       	pop	r25
 4c4:	8f 91       	pop	r24
 4c6:	7f 91       	pop	r23
 4c8:	6f 91       	pop	r22
 4ca:	5f 91       	pop	r21
 4cc:	4f 91       	pop	r20
 4ce:	3f 91       	pop	r19
 4d0:	2f 91       	pop	r18
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	df 90       	pop	r13
 4dc:	cf 90       	pop	r12
 4de:	bf 90       	pop	r11
 4e0:	af 90       	pop	r10
 4e2:	9f 90       	pop	r9
 4e4:	8f 90       	pop	r8
 4e6:	7f 90       	pop	r7
 4e8:	6f 90       	pop	r6
 4ea:	5f 90       	pop	r5
 4ec:	4f 90       	pop	r4
 4ee:	3f 90       	pop	r3
 4f0:	2f 90       	pop	r2
 4f2:	1f 90       	pop	r1
 4f4:	0f 90       	pop	r0
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	0f 90       	pop	r0

	asm volatile ( "ret" );
 4fa:	08 95       	ret

000004fc <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 4fc:	0e 94 22 02 	call	0x444	; 0x444 <vPortYieldFromTick>
		asm volatile ( "reti" );
 500:	18 95       	reti

00000502 <Master_Init>:
 */ 
#include "SPI.h"

void Master_Init(void)
{
	SET_BIT(DDRB,4);
 502:	bc 9a       	sbi	0x17, 4	; 23
	SET_BIT(DDRB,5);
 504:	bd 9a       	sbi	0x17, 5	; 23
	CLR_BIT(DDRB,6);
 506:	be 98       	cbi	0x17, 6	; 23
	SET_BIT(DDRB,7);
 508:	bf 9a       	sbi	0x17, 7	; 23
	SPCR = 0x53;
 50a:	83 e5       	ldi	r24, 0x53	; 83
 50c:	8d b9       	out	0x0d, r24	; 13
 50e:	08 95       	ret

00000510 <Master_Trans>:
	SET_BIT(SPCR,SPR0);
	*/
}
void Master_Trans(uint8_t data)
{
	CLR_BIT(PORTB,4);
 510:	c4 98       	cbi	0x18, 4	; 24
	SPDR = data;
 512:	8f b9       	out	0x0f, r24	; 15
	while (GET_BIT(SPSR,SPIF) != 1);
 514:	77 9b       	sbis	0x0e, 7	; 14
 516:	fe cf       	rjmp	.-4      	; 0x514 <Master_Trans+0x4>
}
 518:	08 95       	ret

0000051a <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
 51a:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <pxDelayedTaskList>
 51e:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <pxDelayedTaskList+0x1>
 522:	80 81       	ld	r24, Z
 524:	81 11       	cpse	r24, r1
 526:	07 c0       	rjmp	.+14     	; 0x536 <prvResetNextTaskUnblockTime+0x1c>
 528:	8f ef       	ldi	r24, 0xFF	; 255
 52a:	9f ef       	ldi	r25, 0xFF	; 255
 52c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <xNextTaskUnblockTime+0x1>
 530:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <xNextTaskUnblockTime>
 534:	08 95       	ret
 536:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <pxDelayedTaskList>
 53a:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <pxDelayedTaskList+0x1>
 53e:	05 80       	ldd	r0, Z+5	; 0x05
 540:	f6 81       	ldd	r31, Z+6	; 0x06
 542:	e0 2d       	mov	r30, r0
 544:	80 81       	ld	r24, Z
 546:	91 81       	ldd	r25, Z+1	; 0x01
 548:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <xNextTaskUnblockTime+0x1>
 54c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <xNextTaskUnblockTime>
 550:	08 95       	ret

00000552 <xTaskIncrementTick>:
 552:	cf 92       	push	r12
 554:	df 92       	push	r13
 556:	ef 92       	push	r14
 558:	ff 92       	push	r15
 55a:	0f 93       	push	r16
 55c:	1f 93       	push	r17
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 566:	81 11       	cpse	r24, r1
 568:	9f c0       	rjmp	.+318    	; 0x6a8 <xTaskIncrementTick+0x156>
 56a:	e0 90 68 00 	lds	r14, 0x0068	; 0x800068 <xTickCount>
 56e:	f0 90 69 00 	lds	r15, 0x0069	; 0x800069 <xTickCount+0x1>
 572:	8f ef       	ldi	r24, 0xFF	; 255
 574:	e8 1a       	sub	r14, r24
 576:	f8 0a       	sbc	r15, r24
 578:	f0 92 69 00 	sts	0x0069, r15	; 0x800069 <xTickCount+0x1>
 57c:	e0 92 68 00 	sts	0x0068, r14	; 0x800068 <xTickCount>
 580:	e1 14       	cp	r14, r1
 582:	f1 04       	cpc	r15, r1
 584:	b9 f4       	brne	.+46     	; 0x5b4 <xTaskIncrementTick+0x62>
 586:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <pxDelayedTaskList>
 58a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <pxDelayedTaskList+0x1>
 58e:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <pxOverflowDelayedTaskList>
 592:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <pxOverflowDelayedTaskList+0x1>
 596:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <pxDelayedTaskList+0x1>
 59a:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <pxDelayedTaskList>
 59e:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <pxOverflowDelayedTaskList+0x1>
 5a2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <pxOverflowDelayedTaskList>
 5a6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <xNumOfOverflows>
 5aa:	8f 5f       	subi	r24, 0xFF	; 255
 5ac:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <xNumOfOverflows>
 5b0:	0e 94 8d 02 	call	0x51a	; 0x51a <prvResetNextTaskUnblockTime>
 5b4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <xNextTaskUnblockTime>
 5b8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <xNextTaskUnblockTime+0x1>
 5bc:	e8 16       	cp	r14, r24
 5be:	f9 06       	cpc	r15, r25
 5c0:	10 f4       	brcc	.+4      	; 0x5c6 <xTaskIncrementTick+0x74>
 5c2:	d1 2c       	mov	r13, r1
 5c4:	53 c0       	rjmp	.+166    	; 0x66c <xTaskIncrementTick+0x11a>
 5c6:	d1 2c       	mov	r13, r1
 5c8:	cc 24       	eor	r12, r12
 5ca:	c3 94       	inc	r12
 5cc:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <pxDelayedTaskList>
 5d0:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <pxDelayedTaskList+0x1>
 5d4:	80 81       	ld	r24, Z
 5d6:	81 11       	cpse	r24, r1
 5d8:	07 c0       	rjmp	.+14     	; 0x5e8 <xTaskIncrementTick+0x96>
 5da:	8f ef       	ldi	r24, 0xFF	; 255
 5dc:	9f ef       	ldi	r25, 0xFF	; 255
 5de:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <xNextTaskUnblockTime+0x1>
 5e2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <xNextTaskUnblockTime>
 5e6:	42 c0       	rjmp	.+132    	; 0x66c <xTaskIncrementTick+0x11a>
 5e8:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <pxDelayedTaskList>
 5ec:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <pxDelayedTaskList+0x1>
 5f0:	05 80       	ldd	r0, Z+5	; 0x05
 5f2:	f6 81       	ldd	r31, Z+6	; 0x06
 5f4:	e0 2d       	mov	r30, r0
 5f6:	c6 81       	ldd	r28, Z+6	; 0x06
 5f8:	d7 81       	ldd	r29, Z+7	; 0x07
 5fa:	8a 81       	ldd	r24, Y+2	; 0x02
 5fc:	9b 81       	ldd	r25, Y+3	; 0x03
 5fe:	e8 16       	cp	r14, r24
 600:	f9 06       	cpc	r15, r25
 602:	28 f4       	brcc	.+10     	; 0x60e <xTaskIncrementTick+0xbc>
 604:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <xNextTaskUnblockTime+0x1>
 608:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <xNextTaskUnblockTime>
 60c:	2f c0       	rjmp	.+94     	; 0x66c <xTaskIncrementTick+0x11a>
 60e:	8e 01       	movw	r16, r28
 610:	0e 5f       	subi	r16, 0xFE	; 254
 612:	1f 4f       	sbci	r17, 0xFF	; 255
 614:	c8 01       	movw	r24, r16
 616:	0e 94 da 01 	call	0x3b4	; 0x3b4 <uxListRemove>
 61a:	8c 89       	ldd	r24, Y+20	; 0x14
 61c:	9d 89       	ldd	r25, Y+21	; 0x15
 61e:	89 2b       	or	r24, r25
 620:	21 f0       	breq	.+8      	; 0x62a <xTaskIncrementTick+0xd8>
 622:	ce 01       	movw	r24, r28
 624:	0c 96       	adiw	r24, 0x0c	; 12
 626:	0e 94 da 01 	call	0x3b4	; 0x3b4 <uxListRemove>
 62a:	8e 89       	ldd	r24, Y+22	; 0x16
 62c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <uxTopReadyPriority>
 630:	98 17       	cp	r25, r24
 632:	10 f4       	brcc	.+4      	; 0x638 <xTaskIncrementTick+0xe6>
 634:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <uxTopReadyPriority>
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	9c 01       	movw	r18, r24
 63c:	22 0f       	add	r18, r18
 63e:	33 1f       	adc	r19, r19
 640:	22 0f       	add	r18, r18
 642:	33 1f       	adc	r19, r19
 644:	22 0f       	add	r18, r18
 646:	33 1f       	adc	r19, r19
 648:	82 0f       	add	r24, r18
 64a:	93 1f       	adc	r25, r19
 64c:	b8 01       	movw	r22, r16
 64e:	82 59       	subi	r24, 0x92	; 146
 650:	9f 4f       	sbci	r25, 0xFF	; 255
 652:	0e 94 b9 01 	call	0x372	; 0x372 <vListInsertEnd>
 656:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <pxCurrentTCB>
 65a:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <pxCurrentTCB+0x1>
 65e:	9e 89       	ldd	r25, Y+22	; 0x16
 660:	86 89       	ldd	r24, Z+22	; 0x16
 662:	98 17       	cp	r25, r24
 664:	08 f4       	brcc	.+2      	; 0x668 <xTaskIncrementTick+0x116>
 666:	b2 cf       	rjmp	.-156    	; 0x5cc <xTaskIncrementTick+0x7a>
 668:	dc 2c       	mov	r13, r12
 66a:	b0 cf       	rjmp	.-160    	; 0x5cc <xTaskIncrementTick+0x7a>
 66c:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <pxCurrentTCB>
 670:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <pxCurrentTCB+0x1>
 674:	86 89       	ldd	r24, Z+22	; 0x16
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	fc 01       	movw	r30, r24
 67a:	ee 0f       	add	r30, r30
 67c:	ff 1f       	adc	r31, r31
 67e:	ee 0f       	add	r30, r30
 680:	ff 1f       	adc	r31, r31
 682:	ee 0f       	add	r30, r30
 684:	ff 1f       	adc	r31, r31
 686:	8e 0f       	add	r24, r30
 688:	9f 1f       	adc	r25, r31
 68a:	fc 01       	movw	r30, r24
 68c:	e2 59       	subi	r30, 0x92	; 146
 68e:	ff 4f       	sbci	r31, 0xFF	; 255
 690:	80 81       	ld	r24, Z
 692:	82 30       	cpi	r24, 0x02	; 2
 694:	10 f0       	brcs	.+4      	; 0x69a <xTaskIncrementTick+0x148>
 696:	dd 24       	eor	r13, r13
 698:	d3 94       	inc	r13
 69a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <xYieldPending>
 69e:	88 23       	and	r24, r24
 6a0:	69 f0       	breq	.+26     	; 0x6bc <xTaskIncrementTick+0x16a>
 6a2:	dd 24       	eor	r13, r13
 6a4:	d3 94       	inc	r13
 6a6:	0a c0       	rjmp	.+20     	; 0x6bc <xTaskIncrementTick+0x16a>
 6a8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <xPendedTicks>
 6ac:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <xPendedTicks+0x1>
 6b0:	01 96       	adiw	r24, 0x01	; 1
 6b2:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <xPendedTicks+0x1>
 6b6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <xPendedTicks>
 6ba:	d1 2c       	mov	r13, r1
 6bc:	8d 2d       	mov	r24, r13
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	1f 91       	pop	r17
 6c4:	0f 91       	pop	r16
 6c6:	ff 90       	pop	r15
 6c8:	ef 90       	pop	r14
 6ca:	df 90       	pop	r13
 6cc:	cf 90       	pop	r12
 6ce:	08 95       	ret

000006d0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 6d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6d4:	88 23       	and	r24, r24
 6d6:	21 f0       	breq	.+8      	; 0x6e0 <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <xYieldPending>
 6de:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
 6e0:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 6e4:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <uxTopReadyPriority>
 6e8:	82 2f       	mov	r24, r18
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	fc 01       	movw	r30, r24
 6ee:	ee 0f       	add	r30, r30
 6f0:	ff 1f       	adc	r31, r31
 6f2:	ee 0f       	add	r30, r30
 6f4:	ff 1f       	adc	r31, r31
 6f6:	ee 0f       	add	r30, r30
 6f8:	ff 1f       	adc	r31, r31
 6fa:	e8 0f       	add	r30, r24
 6fc:	f9 1f       	adc	r31, r25
 6fe:	e2 59       	subi	r30, 0x92	; 146
 700:	ff 4f       	sbci	r31, 0xFF	; 255
 702:	30 81       	ld	r19, Z
 704:	31 11       	cpse	r19, r1
 706:	11 c0       	rjmp	.+34     	; 0x72a <vTaskSwitchContext+0x5a>
 708:	21 50       	subi	r18, 0x01	; 1
 70a:	82 2f       	mov	r24, r18
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	fc 01       	movw	r30, r24
 710:	ee 0f       	add	r30, r30
 712:	ff 1f       	adc	r31, r31
 714:	ee 0f       	add	r30, r30
 716:	ff 1f       	adc	r31, r31
 718:	ee 0f       	add	r30, r30
 71a:	ff 1f       	adc	r31, r31
 71c:	e8 0f       	add	r30, r24
 71e:	f9 1f       	adc	r31, r25
 720:	e2 59       	subi	r30, 0x92	; 146
 722:	ff 4f       	sbci	r31, 0xFF	; 255
 724:	30 81       	ld	r19, Z
 726:	33 23       	and	r19, r19
 728:	79 f3       	breq	.-34     	; 0x708 <vTaskSwitchContext+0x38>
 72a:	ac 01       	movw	r20, r24
 72c:	44 0f       	add	r20, r20
 72e:	55 1f       	adc	r21, r21
 730:	44 0f       	add	r20, r20
 732:	55 1f       	adc	r21, r21
 734:	44 0f       	add	r20, r20
 736:	55 1f       	adc	r21, r21
 738:	48 0f       	add	r20, r24
 73a:	59 1f       	adc	r21, r25
 73c:	da 01       	movw	r26, r20
 73e:	a2 59       	subi	r26, 0x92	; 146
 740:	bf 4f       	sbci	r27, 0xFF	; 255
 742:	11 96       	adiw	r26, 0x01	; 1
 744:	ed 91       	ld	r30, X+
 746:	fc 91       	ld	r31, X
 748:	12 97       	sbiw	r26, 0x02	; 2
 74a:	02 80       	ldd	r0, Z+2	; 0x02
 74c:	f3 81       	ldd	r31, Z+3	; 0x03
 74e:	e0 2d       	mov	r30, r0
 750:	12 96       	adiw	r26, 0x02	; 2
 752:	fc 93       	st	X, r31
 754:	ee 93       	st	-X, r30
 756:	11 97       	sbiw	r26, 0x01	; 1
 758:	4f 58       	subi	r20, 0x8F	; 143
 75a:	5f 4f       	sbci	r21, 0xFF	; 255
 75c:	e4 17       	cp	r30, r20
 75e:	f5 07       	cpc	r31, r21
 760:	29 f4       	brne	.+10     	; 0x76c <vTaskSwitchContext+0x9c>
 762:	42 81       	ldd	r20, Z+2	; 0x02
 764:	53 81       	ldd	r21, Z+3	; 0x03
 766:	fd 01       	movw	r30, r26
 768:	52 83       	std	Z+2, r21	; 0x02
 76a:	41 83       	std	Z+1, r20	; 0x01
 76c:	fc 01       	movw	r30, r24
 76e:	ee 0f       	add	r30, r30
 770:	ff 1f       	adc	r31, r31
 772:	ee 0f       	add	r30, r30
 774:	ff 1f       	adc	r31, r31
 776:	ee 0f       	add	r30, r30
 778:	ff 1f       	adc	r31, r31
 77a:	8e 0f       	add	r24, r30
 77c:	9f 1f       	adc	r25, r31
 77e:	fc 01       	movw	r30, r24
 780:	e2 59       	subi	r30, 0x92	; 146
 782:	ff 4f       	sbci	r31, 0xFF	; 255
 784:	01 80       	ldd	r0, Z+1	; 0x01
 786:	f2 81       	ldd	r31, Z+2	; 0x02
 788:	e0 2d       	mov	r30, r0
 78a:	86 81       	ldd	r24, Z+6	; 0x06
 78c:	97 81       	ldd	r25, Z+7	; 0x07
 78e:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <pxCurrentTCB+0x1>
 792:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <pxCurrentTCB>
 796:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <uxTopReadyPriority>
 79a:	08 95       	ret

0000079c <UART_Init>:
	UBRRH = UBRR_Val >> 8;//00000000 11110101
}
void UART_Transmit(uint8_t data)
{
	while (!(UCSRA & (1<<UDRE)));
	UDR = data;
 79c:	88 e1       	ldi	r24, 0x18	; 24
 79e:	8a b9       	out	0x0a, r24	; 10
 7a0:	86 e8       	ldi	r24, 0x86	; 134
 7a2:	80 bd       	out	0x20, r24	; 32
 7a4:	87 e6       	ldi	r24, 0x67	; 103
 7a6:	89 b9       	out	0x09, r24	; 9
 7a8:	10 bc       	out	0x20, r1	; 32
 7aa:	08 95       	ret

000007ac <UART_Receive>:
}
uint8_t UART_Receive(void)
{
	while(!(UCSRA & (1<<RXC))); 
 7ac:	5f 9b       	sbis	0x0b, 7	; 11
 7ae:	fe cf       	rjmp	.-4      	; 0x7ac <UART_Receive>
	return UDR;
 7b0:	8c b1       	in	r24, 0x0c	; 12
	
 7b2:	08 95       	ret

000007b4 <_exit>:
 7b4:	f8 94       	cli

000007b6 <__stop_program>:
 7b6:	ff cf       	rjmp	.-2      	; 0x7b6 <__stop_program>
